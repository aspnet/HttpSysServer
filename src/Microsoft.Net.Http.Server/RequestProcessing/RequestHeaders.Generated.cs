// Copyright (c) Microsoft Open Technologies, Inc.
// All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING
// WITHOUT LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF
// TITLE, FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR
// NON-INFRINGEMENT.
// See the Apache 2 License for the specific language governing
// permissions and limitations under the License.
// <auto-generated />

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;





namespace Microsoft.Net.Http.Server
{
    [GeneratedCode("TextTemplatingFileGenerator", "")]
    internal partial class RequestHeaders
    {
        // Tracks if individual fields have been read from native or set directly.
        // Once read or set, their presence in the collection is marked by if their string[] is null or not.
        private UInt32 _flag0, _flag1;

        private string[] _Accept;
        private string[] _AcceptCharset;
        private string[] _AcceptEncoding;
        private string[] _AcceptLanguage;
        private string[] _Allow;
        private string[] _Authorization;
        private string[] _CacheControl;
        private string[] _Connection;
        private string[] _ContentEncoding;
        private string[] _ContentLanguage;
        private string[] _ContentLength;
        private string[] _ContentLocation;
        private string[] _ContentMd5;
        private string[] _ContentRange;
        private string[] _ContentType;
        private string[] _Cookie;
        private string[] _Date;
        private string[] _Expect;
        private string[] _Expires;
        private string[] _From;
        private string[] _Host;
        private string[] _IfMatch;
        private string[] _IfModifiedSince;
        private string[] _IfNoneMatch;
        private string[] _IfRange;
        private string[] _IfUnmodifiedSince;
        private string[] _KeepAlive;
        private string[] _LastModified;
        private string[] _MaxForwards;
        private string[] _Pragma;
        private string[] _ProxyAuthorization;
        private string[] _Range;
        private string[] _Referer;
        private string[] _Te;
        private string[] _Trailer;
        private string[] _TransferEncoding;
        private string[] _Translate;
        private string[] _Upgrade;
        private string[] _UserAgent;
        private string[] _Via;
        private string[] _Warning;

        internal string[] Accept
        {
            get
            {
                PopulateAccept();
                return _Accept;
            }
            set 
            {
                _flag0 |= 0x1u;
                _Accept = value;
            }
        }
        internal string[] AcceptCharset
        {
            get
            {
                PopulateAcceptCharset();
                return _AcceptCharset;
            }
            set 
            {
                _flag0 |= 0x2u;
                _AcceptCharset = value;
            }
        }
        internal string[] AcceptEncoding
        {
            get
            {
                PopulateAcceptEncoding();
                return _AcceptEncoding;
            }
            set 
            {
                _flag0 |= 0x4u;
                _AcceptEncoding = value;
            }
        }
        internal string[] AcceptLanguage
        {
            get
            {
                PopulateAcceptLanguage();
                return _AcceptLanguage;
            }
            set 
            {
                _flag0 |= 0x8u;
                _AcceptLanguage = value;
            }
        }
        internal string[] Allow
        {
            get
            {
                PopulateAllow();
                return _Allow;
            }
            set 
            {
                _flag0 |= 0x10u;
                _Allow = value;
            }
        }
        internal string[] Authorization
        {
            get
            {
                PopulateAuthorization();
                return _Authorization;
            }
            set 
            {
                _flag0 |= 0x20u;
                _Authorization = value;
            }
        }
        internal string[] CacheControl
        {
            get
            {
                PopulateCacheControl();
                return _CacheControl;
            }
            set 
            {
                _flag0 |= 0x40u;
                _CacheControl = value;
            }
        }
        internal string[] Connection
        {
            get
            {
                PopulateConnection();
                return _Connection;
            }
            set 
            {
                _flag0 |= 0x80u;
                _Connection = value;
            }
        }
        internal string[] ContentEncoding
        {
            get
            {
                PopulateContentEncoding();
                return _ContentEncoding;
            }
            set 
            {
                _flag0 |= 0x100u;
                _ContentEncoding = value;
            }
        }
        internal string[] ContentLanguage
        {
            get
            {
                PopulateContentLanguage();
                return _ContentLanguage;
            }
            set 
            {
                _flag0 |= 0x200u;
                _ContentLanguage = value;
            }
        }
        internal string[] ContentLength
        {
            get
            {
                PopulateContentLength();
                return _ContentLength;
            }
            set 
            {
                _flag0 |= 0x400u;
                _ContentLength = value;
            }
        }
        internal string[] ContentLocation
        {
            get
            {
                PopulateContentLocation();
                return _ContentLocation;
            }
            set 
            {
                _flag0 |= 0x800u;
                _ContentLocation = value;
            }
        }
        internal string[] ContentMd5
        {
            get
            {
                PopulateContentMd5();
                return _ContentMd5;
            }
            set 
            {
                _flag0 |= 0x1000u;
                _ContentMd5 = value;
            }
        }
        internal string[] ContentRange
        {
            get
            {
                PopulateContentRange();
                return _ContentRange;
            }
            set 
            {
                _flag0 |= 0x2000u;
                _ContentRange = value;
            }
        }
        internal string[] ContentType
        {
            get
            {
                PopulateContentType();
                return _ContentType;
            }
            set 
            {
                _flag0 |= 0x4000u;
                _ContentType = value;
            }
        }
        internal string[] Cookie
        {
            get
            {
                PopulateCookie();
                return _Cookie;
            }
            set 
            {
                _flag0 |= 0x8000u;
                _Cookie = value;
            }
        }
        internal string[] Date
        {
            get
            {
                PopulateDate();
                return _Date;
            }
            set 
            {
                _flag0 |= 0x10000u;
                _Date = value;
            }
        }
        internal string[] Expect
        {
            get
            {
                PopulateExpect();
                return _Expect;
            }
            set 
            {
                _flag0 |= 0x20000u;
                _Expect = value;
            }
        }
        internal string[] Expires
        {
            get
            {
                PopulateExpires();
                return _Expires;
            }
            set 
            {
                _flag0 |= 0x40000u;
                _Expires = value;
            }
        }
        internal string[] From
        {
            get
            {
                PopulateFrom();
                return _From;
            }
            set 
            {
                _flag0 |= 0x80000u;
                _From = value;
            }
        }
        internal string[] Host
        {
            get
            {
                PopulateHost();
                return _Host;
            }
            set 
            {
                _flag0 |= 0x100000u;
                _Host = value;
            }
        }
        internal string[] IfMatch
        {
            get
            {
                PopulateIfMatch();
                return _IfMatch;
            }
            set 
            {
                _flag0 |= 0x200000u;
                _IfMatch = value;
            }
        }
        internal string[] IfModifiedSince
        {
            get
            {
                PopulateIfModifiedSince();
                return _IfModifiedSince;
            }
            set 
            {
                _flag0 |= 0x400000u;
                _IfModifiedSince = value;
            }
        }
        internal string[] IfNoneMatch
        {
            get
            {
                PopulateIfNoneMatch();
                return _IfNoneMatch;
            }
            set 
            {
                _flag0 |= 0x800000u;
                _IfNoneMatch = value;
            }
        }
        internal string[] IfRange
        {
            get
            {
                PopulateIfRange();
                return _IfRange;
            }
            set 
            {
                _flag0 |= 0x1000000u;
                _IfRange = value;
            }
        }
        internal string[] IfUnmodifiedSince
        {
            get
            {
                PopulateIfUnmodifiedSince();
                return _IfUnmodifiedSince;
            }
            set 
            {
                _flag0 |= 0x2000000u;
                _IfUnmodifiedSince = value;
            }
        }
        internal string[] KeepAlive
        {
            get
            {
                PopulateKeepAlive();
                return _KeepAlive;
            }
            set 
            {
                _flag0 |= 0x4000000u;
                _KeepAlive = value;
            }
        }
        internal string[] LastModified
        {
            get
            {
                PopulateLastModified();
                return _LastModified;
            }
            set 
            {
                _flag0 |= 0x8000000u;
                _LastModified = value;
            }
        }
        internal string[] MaxForwards
        {
            get
            {
                PopulateMaxForwards();
                return _MaxForwards;
            }
            set 
            {
                _flag0 |= 0x10000000u;
                _MaxForwards = value;
            }
        }
        internal string[] Pragma
        {
            get
            {
                PopulatePragma();
                return _Pragma;
            }
            set 
            {
                _flag0 |= 0x20000000u;
                _Pragma = value;
            }
        }
        internal string[] ProxyAuthorization
        {
            get
            {
                PopulateProxyAuthorization();
                return _ProxyAuthorization;
            }
            set 
            {
                _flag0 |= 0x40000000u;
                _ProxyAuthorization = value;
            }
        }
        internal string[] Range
        {
            get
            {
                PopulateRange();
                return _Range;
            }
            set 
            {
                _flag0 |= 0x80000000u;
                _Range = value;
            }
        }
        internal string[] Referer
        {
            get
            {
                PopulateReferer();
                return _Referer;
            }
            set 
            {
                _flag1 |= 0x1u;
                _Referer = value;
            }
        }
        internal string[] Te
        {
            get
            {
                PopulateTe();
                return _Te;
            }
            set 
            {
                _flag1 |= 0x2u;
                _Te = value;
            }
        }
        internal string[] Trailer
        {
            get
            {
                PopulateTrailer();
                return _Trailer;
            }
            set 
            {
                _flag1 |= 0x4u;
                _Trailer = value;
            }
        }
        internal string[] TransferEncoding
        {
            get
            {
                PopulateTransferEncoding();
                return _TransferEncoding;
            }
            set 
            {
                _flag1 |= 0x8u;
                _TransferEncoding = value;
            }
        }
        internal string[] Translate
        {
            get
            {
                PopulateTranslate();
                return _Translate;
            }
            set 
            {
                _flag1 |= 0x10u;
                _Translate = value;
            }
        }
        internal string[] Upgrade
        {
            get
            {
                PopulateUpgrade();
                return _Upgrade;
            }
            set 
            {
                _flag1 |= 0x20u;
                _Upgrade = value;
            }
        }
        internal string[] UserAgent
        {
            get
            {
                PopulateUserAgent();
                return _UserAgent;
            }
            set 
            {
                _flag1 |= 0x40u;
                _UserAgent = value;
            }
        }
        internal string[] Via
        {
            get
            {
                PopulateVia();
                return _Via;
            }
            set 
            {
                _flag1 |= 0x80u;
                _Via = value;
            }
        }
        internal string[] Warning
        {
            get
            {
                PopulateWarning();
                return _Warning;
            }
            set 
            {
                _flag1 |= 0x100u;
                _Warning = value;
            }
        }

        private void PopulateAccept()
        {
            if (!(((_flag0 & 0x1u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.Accept);
                if (nativeValue != null)
                {
                    _Accept = new string[] { nativeValue };
                }
                _flag0 |= 0x1u;
            }
        }

        private void PopulateAcceptCharset()
        {
            if (!(((_flag0 & 0x2u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.AcceptCharset);
                if (nativeValue != null)
                {
                    _AcceptCharset = new string[] { nativeValue };
                }
                _flag0 |= 0x2u;
            }
        }

        private void PopulateAcceptEncoding()
        {
            if (!(((_flag0 & 0x4u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.AcceptEncoding);
                if (nativeValue != null)
                {
                    _AcceptEncoding = new string[] { nativeValue };
                }
                _flag0 |= 0x4u;
            }
        }

        private void PopulateAcceptLanguage()
        {
            if (!(((_flag0 & 0x8u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.AcceptLanguage);
                if (nativeValue != null)
                {
                    _AcceptLanguage = new string[] { nativeValue };
                }
                _flag0 |= 0x8u;
            }
        }

        private void PopulateAllow()
        {
            if (!(((_flag0 & 0x10u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.Allow);
                if (nativeValue != null)
                {
                    _Allow = new string[] { nativeValue };
                }
                _flag0 |= 0x10u;
            }
        }

        private void PopulateAuthorization()
        {
            if (!(((_flag0 & 0x20u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.Authorization);
                if (nativeValue != null)
                {
                    _Authorization = new string[] { nativeValue };
                }
                _flag0 |= 0x20u;
            }
        }

        private void PopulateCacheControl()
        {
            if (!(((_flag0 & 0x40u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.CacheControl);
                if (nativeValue != null)
                {
                    _CacheControl = new string[] { nativeValue };
                }
                _flag0 |= 0x40u;
            }
        }

        private void PopulateConnection()
        {
            if (!(((_flag0 & 0x80u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.Connection);
                if (nativeValue != null)
                {
                    _Connection = new string[] { nativeValue };
                }
                _flag0 |= 0x80u;
            }
        }

        private void PopulateContentEncoding()
        {
            if (!(((_flag0 & 0x100u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.ContentEncoding);
                if (nativeValue != null)
                {
                    _ContentEncoding = new string[] { nativeValue };
                }
                _flag0 |= 0x100u;
            }
        }

        private void PopulateContentLanguage()
        {
            if (!(((_flag0 & 0x200u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.ContentLanguage);
                if (nativeValue != null)
                {
                    _ContentLanguage = new string[] { nativeValue };
                }
                _flag0 |= 0x200u;
            }
        }

        private void PopulateContentLength()
        {
            if (!(((_flag0 & 0x400u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.ContentLength);
                if (nativeValue != null)
                {
                    _ContentLength = new string[] { nativeValue };
                }
                _flag0 |= 0x400u;
            }
        }

        private void PopulateContentLocation()
        {
            if (!(((_flag0 & 0x800u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.ContentLocation);
                if (nativeValue != null)
                {
                    _ContentLocation = new string[] { nativeValue };
                }
                _flag0 |= 0x800u;
            }
        }

        private void PopulateContentMd5()
        {
            if (!(((_flag0 & 0x1000u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.ContentMd5);
                if (nativeValue != null)
                {
                    _ContentMd5 = new string[] { nativeValue };
                }
                _flag0 |= 0x1000u;
            }
        }

        private void PopulateContentRange()
        {
            if (!(((_flag0 & 0x2000u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.ContentRange);
                if (nativeValue != null)
                {
                    _ContentRange = new string[] { nativeValue };
                }
                _flag0 |= 0x2000u;
            }
        }

        private void PopulateContentType()
        {
            if (!(((_flag0 & 0x4000u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.ContentType);
                if (nativeValue != null)
                {
                    _ContentType = new string[] { nativeValue };
                }
                _flag0 |= 0x4000u;
            }
        }

        private void PopulateCookie()
        {
            if (!(((_flag0 & 0x8000u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.Cookie);
                if (nativeValue != null)
                {
                    _Cookie = new string[] { nativeValue };
                }
                _flag0 |= 0x8000u;
            }
        }

        private void PopulateDate()
        {
            if (!(((_flag0 & 0x10000u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.Date);
                if (nativeValue != null)
                {
                    _Date = new string[] { nativeValue };
                }
                _flag0 |= 0x10000u;
            }
        }

        private void PopulateExpect()
        {
            if (!(((_flag0 & 0x20000u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.Expect);
                if (nativeValue != null)
                {
                    _Expect = new string[] { nativeValue };
                }
                _flag0 |= 0x20000u;
            }
        }

        private void PopulateExpires()
        {
            if (!(((_flag0 & 0x40000u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.Expires);
                if (nativeValue != null)
                {
                    _Expires = new string[] { nativeValue };
                }
                _flag0 |= 0x40000u;
            }
        }

        private void PopulateFrom()
        {
            if (!(((_flag0 & 0x80000u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.From);
                if (nativeValue != null)
                {
                    _From = new string[] { nativeValue };
                }
                _flag0 |= 0x80000u;
            }
        }

        private void PopulateHost()
        {
            if (!(((_flag0 & 0x100000u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.Host);
                if (nativeValue != null)
                {
                    _Host = new string[] { nativeValue };
                }
                _flag0 |= 0x100000u;
            }
        }

        private void PopulateIfMatch()
        {
            if (!(((_flag0 & 0x200000u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.IfMatch);
                if (nativeValue != null)
                {
                    _IfMatch = new string[] { nativeValue };
                }
                _flag0 |= 0x200000u;
            }
        }

        private void PopulateIfModifiedSince()
        {
            if (!(((_flag0 & 0x400000u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.IfModifiedSince);
                if (nativeValue != null)
                {
                    _IfModifiedSince = new string[] { nativeValue };
                }
                _flag0 |= 0x400000u;
            }
        }

        private void PopulateIfNoneMatch()
        {
            if (!(((_flag0 & 0x800000u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.IfNoneMatch);
                if (nativeValue != null)
                {
                    _IfNoneMatch = new string[] { nativeValue };
                }
                _flag0 |= 0x800000u;
            }
        }

        private void PopulateIfRange()
        {
            if (!(((_flag0 & 0x1000000u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.IfRange);
                if (nativeValue != null)
                {
                    _IfRange = new string[] { nativeValue };
                }
                _flag0 |= 0x1000000u;
            }
        }

        private void PopulateIfUnmodifiedSince()
        {
            if (!(((_flag0 & 0x2000000u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.IfUnmodifiedSince);
                if (nativeValue != null)
                {
                    _IfUnmodifiedSince = new string[] { nativeValue };
                }
                _flag0 |= 0x2000000u;
            }
        }

        private void PopulateKeepAlive()
        {
            if (!(((_flag0 & 0x4000000u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.KeepAlive);
                if (nativeValue != null)
                {
                    _KeepAlive = new string[] { nativeValue };
                }
                _flag0 |= 0x4000000u;
            }
        }

        private void PopulateLastModified()
        {
            if (!(((_flag0 & 0x8000000u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.LastModified);
                if (nativeValue != null)
                {
                    _LastModified = new string[] { nativeValue };
                }
                _flag0 |= 0x8000000u;
            }
        }

        private void PopulateMaxForwards()
        {
            if (!(((_flag0 & 0x10000000u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.MaxForwards);
                if (nativeValue != null)
                {
                    _MaxForwards = new string[] { nativeValue };
                }
                _flag0 |= 0x10000000u;
            }
        }

        private void PopulatePragma()
        {
            if (!(((_flag0 & 0x20000000u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.Pragma);
                if (nativeValue != null)
                {
                    _Pragma = new string[] { nativeValue };
                }
                _flag0 |= 0x20000000u;
            }
        }

        private void PopulateProxyAuthorization()
        {
            if (!(((_flag0 & 0x40000000u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.ProxyAuthorization);
                if (nativeValue != null)
                {
                    _ProxyAuthorization = new string[] { nativeValue };
                }
                _flag0 |= 0x40000000u;
            }
        }

        private void PopulateRange()
        {
            if (!(((_flag0 & 0x80000000u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.Range);
                if (nativeValue != null)
                {
                    _Range = new string[] { nativeValue };
                }
                _flag0 |= 0x80000000u;
            }
        }

        private void PopulateReferer()
        {
            if (!(((_flag1 & 0x1u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.Referer);
                if (nativeValue != null)
                {
                    _Referer = new string[] { nativeValue };
                }
                _flag1 |= 0x1u;
            }
        }

        private void PopulateTe()
        {
            if (!(((_flag1 & 0x2u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.Te);
                if (nativeValue != null)
                {
                    _Te = new string[] { nativeValue };
                }
                _flag1 |= 0x2u;
            }
        }

        private void PopulateTrailer()
        {
            if (!(((_flag1 & 0x4u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.Trailer);
                if (nativeValue != null)
                {
                    _Trailer = new string[] { nativeValue };
                }
                _flag1 |= 0x4u;
            }
        }

        private void PopulateTransferEncoding()
        {
            if (!(((_flag1 & 0x8u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.TransferEncoding);
                if (nativeValue != null)
                {
                    _TransferEncoding = new string[] { nativeValue };
                }
                _flag1 |= 0x8u;
            }
        }

        private void PopulateTranslate()
        {
            if (!(((_flag1 & 0x10u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.Translate);
                if (nativeValue != null)
                {
                    _Translate = new string[] { nativeValue };
                }
                _flag1 |= 0x10u;
            }
        }

        private void PopulateUpgrade()
        {
            if (!(((_flag1 & 0x20u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.Upgrade);
                if (nativeValue != null)
                {
                    _Upgrade = new string[] { nativeValue };
                }
                _flag1 |= 0x20u;
            }
        }

        private void PopulateUserAgent()
        {
            if (!(((_flag1 & 0x40u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.UserAgent);
                if (nativeValue != null)
                {
                    _UserAgent = new string[] { nativeValue };
                }
                _flag1 |= 0x40u;
            }
        }

        private void PopulateVia()
        {
            if (!(((_flag1 & 0x80u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.Via);
                if (nativeValue != null)
                {
                    _Via = new string[] { nativeValue };
                }
                _flag1 |= 0x80u;
            }
        }

        private void PopulateWarning()
        {
            if (!(((_flag1 & 0x100u) != 0)))
            {
                string nativeValue = GetKnownHeader(HttpSysRequestHeader.Warning);
                if (nativeValue != null)
                {
                    _Warning = new string[] { nativeValue };
                }
                _flag1 |= 0x100u;
            }
        }


        private void PopulateAllKnownHeaders()
        {
            PopulateAccept();
            PopulateAcceptCharset();
            PopulateAcceptEncoding();
            PopulateAcceptLanguage();
            PopulateAllow();
            PopulateAuthorization();
            PopulateCacheControl();
            PopulateConnection();
            PopulateContentEncoding();
            PopulateContentLanguage();
            PopulateContentLength();
            PopulateContentLocation();
            PopulateContentMd5();
            PopulateContentRange();
            PopulateContentType();
            PopulateCookie();
            PopulateDate();
            PopulateExpect();
            PopulateExpires();
            PopulateFrom();
            PopulateHost();
            PopulateIfMatch();
            PopulateIfModifiedSince();
            PopulateIfNoneMatch();
            PopulateIfRange();
            PopulateIfUnmodifiedSince();
            PopulateKeepAlive();
            PopulateLastModified();
            PopulateMaxForwards();
            PopulatePragma();
            PopulateProxyAuthorization();
            PopulateRange();
            PopulateReferer();
            PopulateTe();
            PopulateTrailer();
            PopulateTransferEncoding();
            PopulateTranslate();
            PopulateUpgrade();
            PopulateUserAgent();
            PopulateVia();
            PopulateWarning();
        }

        private bool PropertiesContainsKey(string key)
        {
            switch (key.Length)
            {
                case 2:
                    if (string.Equals(key, "Te", StringComparison.OrdinalIgnoreCase))
                    {
                        return Te != null;
                    }
                    break;
                case 3:
                    if (string.Equals(key, "Via", StringComparison.OrdinalIgnoreCase))
                    {
                        return Via != null;
                    }
                    break;
                case 4:
                    if (string.Equals(key, "Date", StringComparison.OrdinalIgnoreCase))
                    {
                        return Date != null;
                    }
                    if (string.Equals(key, "From", StringComparison.OrdinalIgnoreCase))
                    {
                        return From != null;
                    }
                    if (string.Equals(key, "Host", StringComparison.OrdinalIgnoreCase))
                    {
                        return Host != null;
                    }
                    break;
                case 5:
                    if (string.Equals(key, "Allow", StringComparison.OrdinalIgnoreCase))
                    {
                        return Allow != null;
                    }
                    if (string.Equals(key, "Range", StringComparison.OrdinalIgnoreCase))
                    {
                        return Range != null;
                    }
                    break;
                case 6:
                    if (string.Equals(key, "Accept", StringComparison.OrdinalIgnoreCase))
                    {
                        return Accept != null;
                    }
                    if (string.Equals(key, "Cookie", StringComparison.OrdinalIgnoreCase))
                    {
                        return Cookie != null;
                    }
                    if (string.Equals(key, "Expect", StringComparison.OrdinalIgnoreCase))
                    {
                        return Expect != null;
                    }
                    if (string.Equals(key, "Pragma", StringComparison.OrdinalIgnoreCase))
                    {
                        return Pragma != null;
                    }
                    break;
                case 7:
                    if (string.Equals(key, "Expires", StringComparison.OrdinalIgnoreCase))
                    {
                        return Expires != null;
                    }
                    if (string.Equals(key, "Referer", StringComparison.OrdinalIgnoreCase))
                    {
                        return Referer != null;
                    }
                    if (string.Equals(key, "Trailer", StringComparison.OrdinalIgnoreCase))
                    {
                        return Trailer != null;
                    }
                    if (string.Equals(key, "Upgrade", StringComparison.OrdinalIgnoreCase))
                    {
                        return Upgrade != null;
                    }
                    if (string.Equals(key, "Warning", StringComparison.OrdinalIgnoreCase))
                    {
                        return Warning != null;
                    }
                    break;
                case 8:
                    if (string.Equals(key, "If-Match", StringComparison.OrdinalIgnoreCase))
                    {
                        return IfMatch != null;
                    }
                    if (string.Equals(key, "If-Range", StringComparison.OrdinalIgnoreCase))
                    {
                        return IfRange != null;
                    }
                    break;
                case 9:
                    if (string.Equals(key, "Translate", StringComparison.OrdinalIgnoreCase))
                    {
                        return Translate != null;
                    }
                    break;
                case 10:
                    if (string.Equals(key, "Connection", StringComparison.OrdinalIgnoreCase))
                    {
                        return Connection != null;
                    }
                    if (string.Equals(key, "Keep-Alive", StringComparison.OrdinalIgnoreCase))
                    {
                        return KeepAlive != null;
                    }
                    if (string.Equals(key, "User-Agent", StringComparison.OrdinalIgnoreCase))
                    {
                        return UserAgent != null;
                    }
                    break;
                case 11:
                    if (string.Equals(key, "Content-Md5", StringComparison.OrdinalIgnoreCase))
                    {
                        return ContentMd5 != null;
                    }
                    break;
                case 12:
                    if (string.Equals(key, "Content-Type", StringComparison.OrdinalIgnoreCase))
                    {
                        return ContentType != null;
                    }
                    if (string.Equals(key, "Max-Forwards", StringComparison.OrdinalIgnoreCase))
                    {
                        return MaxForwards != null;
                    }
                    break;
                case 13:
                    if (string.Equals(key, "Authorization", StringComparison.OrdinalIgnoreCase))
                    {
                        return Authorization != null;
                    }
                    if (string.Equals(key, "Cache-Control", StringComparison.OrdinalIgnoreCase))
                    {
                        return CacheControl != null;
                    }
                    if (string.Equals(key, "Content-Range", StringComparison.OrdinalIgnoreCase))
                    {
                        return ContentRange != null;
                    }
                    if (string.Equals(key, "If-None-Match", StringComparison.OrdinalIgnoreCase))
                    {
                        return IfNoneMatch != null;
                    }
                    if (string.Equals(key, "Last-Modified", StringComparison.OrdinalIgnoreCase))
                    {
                        return LastModified != null;
                    }
                    break;
                case 14:
                    if (string.Equals(key, "Accept-Charset", StringComparison.OrdinalIgnoreCase))
                    {
                        return AcceptCharset != null;
                    }
                    if (string.Equals(key, "Content-Length", StringComparison.OrdinalIgnoreCase))
                    {
                        return ContentLength != null;
                    }
                    break;
                case 15:
                    if (string.Equals(key, "Accept-Encoding", StringComparison.OrdinalIgnoreCase))
                    {
                        return AcceptEncoding != null;
                    }
                    if (string.Equals(key, "Accept-Language", StringComparison.OrdinalIgnoreCase))
                    {
                        return AcceptLanguage != null;
                    }
                    break;
                case 16:
                    if (string.Equals(key, "Content-Encoding", StringComparison.OrdinalIgnoreCase))
                    {
                        return ContentEncoding != null;
                    }
                    if (string.Equals(key, "Content-Language", StringComparison.OrdinalIgnoreCase))
                    {
                        return ContentLanguage != null;
                    }
                    if (string.Equals(key, "Content-Location", StringComparison.OrdinalIgnoreCase))
                    {
                        return ContentLocation != null;
                    }
                    break;
                case 17:
                    if (string.Equals(key, "If-Modified-Since", StringComparison.OrdinalIgnoreCase))
                    {
                        return IfModifiedSince != null;
                    }
                    if (string.Equals(key, "Transfer-Encoding", StringComparison.OrdinalIgnoreCase))
                    {
                        return TransferEncoding != null;
                    }
                    break;
                case 19:
                    if (string.Equals(key, "If-Unmodified-Since", StringComparison.OrdinalIgnoreCase))
                    {
                        return IfUnmodifiedSince != null;
                    }
                    if (string.Equals(key, "Proxy-Authorization", StringComparison.OrdinalIgnoreCase))
                    {
                        return ProxyAuthorization != null;
                    }
                    break;
            }
            return false;
        }

        private bool PropertiesTryGetValue(string key, out string[] value)
        {
            switch (key.Length)
            {
                case 2:
                    if (string.Equals(key, "Te", StringComparison.OrdinalIgnoreCase))
                    {
                        value = Te;
                        return value != null;
                    }
                   break;
                case 3:
                    if (string.Equals(key, "Via", StringComparison.OrdinalIgnoreCase))
                    {
                        value = Via;
                        return value != null;
                    }
                   break;
                case 4:
                    if (string.Equals(key, "Date", StringComparison.OrdinalIgnoreCase))
                    {
                        value = Date;
                        return value != null;
                    }
                    if (string.Equals(key, "From", StringComparison.OrdinalIgnoreCase))
                    {
                        value = From;
                        return value != null;
                    }
                    if (string.Equals(key, "Host", StringComparison.OrdinalIgnoreCase))
                    {
                        value = Host;
                        return value != null;
                    }
                   break;
                case 5:
                    if (string.Equals(key, "Allow", StringComparison.OrdinalIgnoreCase))
                    {
                        value = Allow;
                        return value != null;
                    }
                    if (string.Equals(key, "Range", StringComparison.OrdinalIgnoreCase))
                    {
                        value = Range;
                        return value != null;
                    }
                   break;
                case 6:
                    if (string.Equals(key, "Accept", StringComparison.OrdinalIgnoreCase))
                    {
                        value = Accept;
                        return value != null;
                    }
                    if (string.Equals(key, "Cookie", StringComparison.OrdinalIgnoreCase))
                    {
                        value = Cookie;
                        return value != null;
                    }
                    if (string.Equals(key, "Expect", StringComparison.OrdinalIgnoreCase))
                    {
                        value = Expect;
                        return value != null;
                    }
                    if (string.Equals(key, "Pragma", StringComparison.OrdinalIgnoreCase))
                    {
                        value = Pragma;
                        return value != null;
                    }
                   break;
                case 7:
                    if (string.Equals(key, "Expires", StringComparison.OrdinalIgnoreCase))
                    {
                        value = Expires;
                        return value != null;
                    }
                    if (string.Equals(key, "Referer", StringComparison.OrdinalIgnoreCase))
                    {
                        value = Referer;
                        return value != null;
                    }
                    if (string.Equals(key, "Trailer", StringComparison.OrdinalIgnoreCase))
                    {
                        value = Trailer;
                        return value != null;
                    }
                    if (string.Equals(key, "Upgrade", StringComparison.OrdinalIgnoreCase))
                    {
                        value = Upgrade;
                        return value != null;
                    }
                    if (string.Equals(key, "Warning", StringComparison.OrdinalIgnoreCase))
                    {
                        value = Warning;
                        return value != null;
                    }
                   break;
                case 8:
                    if (string.Equals(key, "If-Match", StringComparison.OrdinalIgnoreCase))
                    {
                        value = IfMatch;
                        return value != null;
                    }
                    if (string.Equals(key, "If-Range", StringComparison.OrdinalIgnoreCase))
                    {
                        value = IfRange;
                        return value != null;
                    }
                   break;
                case 9:
                    if (string.Equals(key, "Translate", StringComparison.OrdinalIgnoreCase))
                    {
                        value = Translate;
                        return value != null;
                    }
                   break;
                case 10:
                    if (string.Equals(key, "Connection", StringComparison.OrdinalIgnoreCase))
                    {
                        value = Connection;
                        return value != null;
                    }
                    if (string.Equals(key, "Keep-Alive", StringComparison.OrdinalIgnoreCase))
                    {
                        value = KeepAlive;
                        return value != null;
                    }
                    if (string.Equals(key, "User-Agent", StringComparison.OrdinalIgnoreCase))
                    {
                        value = UserAgent;
                        return value != null;
                    }
                   break;
                case 11:
                    if (string.Equals(key, "Content-Md5", StringComparison.OrdinalIgnoreCase))
                    {
                        value = ContentMd5;
                        return value != null;
                    }
                   break;
                case 12:
                    if (string.Equals(key, "Content-Type", StringComparison.OrdinalIgnoreCase))
                    {
                        value = ContentType;
                        return value != null;
                    }
                    if (string.Equals(key, "Max-Forwards", StringComparison.OrdinalIgnoreCase))
                    {
                        value = MaxForwards;
                        return value != null;
                    }
                   break;
                case 13:
                    if (string.Equals(key, "Authorization", StringComparison.OrdinalIgnoreCase))
                    {
                        value = Authorization;
                        return value != null;
                    }
                    if (string.Equals(key, "Cache-Control", StringComparison.OrdinalIgnoreCase))
                    {
                        value = CacheControl;
                        return value != null;
                    }
                    if (string.Equals(key, "Content-Range", StringComparison.OrdinalIgnoreCase))
                    {
                        value = ContentRange;
                        return value != null;
                    }
                    if (string.Equals(key, "If-None-Match", StringComparison.OrdinalIgnoreCase))
                    {
                        value = IfNoneMatch;
                        return value != null;
                    }
                    if (string.Equals(key, "Last-Modified", StringComparison.OrdinalIgnoreCase))
                    {
                        value = LastModified;
                        return value != null;
                    }
                   break;
                case 14:
                    if (string.Equals(key, "Accept-Charset", StringComparison.OrdinalIgnoreCase))
                    {
                        value = AcceptCharset;
                        return value != null;
                    }
                    if (string.Equals(key, "Content-Length", StringComparison.OrdinalIgnoreCase))
                    {
                        value = ContentLength;
                        return value != null;
                    }
                   break;
                case 15:
                    if (string.Equals(key, "Accept-Encoding", StringComparison.OrdinalIgnoreCase))
                    {
                        value = AcceptEncoding;
                        return value != null;
                    }
                    if (string.Equals(key, "Accept-Language", StringComparison.OrdinalIgnoreCase))
                    {
                        value = AcceptLanguage;
                        return value != null;
                    }
                   break;
                case 16:
                    if (string.Equals(key, "Content-Encoding", StringComparison.OrdinalIgnoreCase))
                    {
                        value = ContentEncoding;
                        return value != null;
                    }
                    if (string.Equals(key, "Content-Language", StringComparison.OrdinalIgnoreCase))
                    {
                        value = ContentLanguage;
                        return value != null;
                    }
                    if (string.Equals(key, "Content-Location", StringComparison.OrdinalIgnoreCase))
                    {
                        value = ContentLocation;
                        return value != null;
                    }
                   break;
                case 17:
                    if (string.Equals(key, "If-Modified-Since", StringComparison.OrdinalIgnoreCase))
                    {
                        value = IfModifiedSince;
                        return value != null;
                    }
                    if (string.Equals(key, "Transfer-Encoding", StringComparison.OrdinalIgnoreCase))
                    {
                        value = TransferEncoding;
                        return value != null;
                    }
                   break;
                case 19:
                    if (string.Equals(key, "If-Unmodified-Since", StringComparison.OrdinalIgnoreCase))
                    {
                        value = IfUnmodifiedSince;
                        return value != null;
                    }
                    if (string.Equals(key, "Proxy-Authorization", StringComparison.OrdinalIgnoreCase))
                    {
                        value = ProxyAuthorization;
                        return value != null;
                    }
                   break;
            }
            value = null;
            return false;
        }

        private bool PropertiesTrySetValue(string key, string[] value)
        {
            switch (key.Length)
            {
                case 2:
                    if (string.Equals(key, "Te", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag1 |= 0x2u;
                        Te = value;
                        return true;
                    }
                   break;
                case 3:
                    if (string.Equals(key, "Via", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag1 |= 0x80u;
                        Via = value;
                        return true;
                    }
                   break;
                case 4:
                    if (string.Equals(key, "Date", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x10000u;
                        Date = value;
                        return true;
                    }
                    if (string.Equals(key, "From", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x80000u;
                        From = value;
                        return true;
                    }
                    if (string.Equals(key, "Host", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x100000u;
                        Host = value;
                        return true;
                    }
                   break;
                case 5:
                    if (string.Equals(key, "Allow", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x10u;
                        Allow = value;
                        return true;
                    }
                    if (string.Equals(key, "Range", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x80000000u;
                        Range = value;
                        return true;
                    }
                   break;
                case 6:
                    if (string.Equals(key, "Accept", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x1u;
                        Accept = value;
                        return true;
                    }
                    if (string.Equals(key, "Cookie", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x8000u;
                        Cookie = value;
                        return true;
                    }
                    if (string.Equals(key, "Expect", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x20000u;
                        Expect = value;
                        return true;
                    }
                    if (string.Equals(key, "Pragma", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x20000000u;
                        Pragma = value;
                        return true;
                    }
                   break;
                case 7:
                    if (string.Equals(key, "Expires", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x40000u;
                        Expires = value;
                        return true;
                    }
                    if (string.Equals(key, "Referer", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag1 |= 0x1u;
                        Referer = value;
                        return true;
                    }
                    if (string.Equals(key, "Trailer", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag1 |= 0x4u;
                        Trailer = value;
                        return true;
                    }
                    if (string.Equals(key, "Upgrade", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag1 |= 0x20u;
                        Upgrade = value;
                        return true;
                    }
                    if (string.Equals(key, "Warning", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag1 |= 0x100u;
                        Warning = value;
                        return true;
                    }
                   break;
                case 8:
                    if (string.Equals(key, "If-Match", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x200000u;
                        IfMatch = value;
                        return true;
                    }
                    if (string.Equals(key, "If-Range", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x1000000u;
                        IfRange = value;
                        return true;
                    }
                   break;
                case 9:
                    if (string.Equals(key, "Translate", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag1 |= 0x10u;
                        Translate = value;
                        return true;
                    }
                   break;
                case 10:
                    if (string.Equals(key, "Connection", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x80u;
                        Connection = value;
                        return true;
                    }
                    if (string.Equals(key, "Keep-Alive", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x4000000u;
                        KeepAlive = value;
                        return true;
                    }
                    if (string.Equals(key, "User-Agent", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag1 |= 0x40u;
                        UserAgent = value;
                        return true;
                    }
                   break;
                case 11:
                    if (string.Equals(key, "Content-Md5", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x1000u;
                        ContentMd5 = value;
                        return true;
                    }
                   break;
                case 12:
                    if (string.Equals(key, "Content-Type", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x4000u;
                        ContentType = value;
                        return true;
                    }
                    if (string.Equals(key, "Max-Forwards", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x10000000u;
                        MaxForwards = value;
                        return true;
                    }
                   break;
                case 13:
                    if (string.Equals(key, "Authorization", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x20u;
                        Authorization = value;
                        return true;
                    }
                    if (string.Equals(key, "Cache-Control", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x40u;
                        CacheControl = value;
                        return true;
                    }
                    if (string.Equals(key, "Content-Range", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x2000u;
                        ContentRange = value;
                        return true;
                    }
                    if (string.Equals(key, "If-None-Match", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x800000u;
                        IfNoneMatch = value;
                        return true;
                    }
                    if (string.Equals(key, "Last-Modified", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x8000000u;
                        LastModified = value;
                        return true;
                    }
                   break;
                case 14:
                    if (string.Equals(key, "Accept-Charset", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x2u;
                        AcceptCharset = value;
                        return true;
                    }
                    if (string.Equals(key, "Content-Length", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x400u;
                        ContentLength = value;
                        return true;
                    }
                   break;
                case 15:
                    if (string.Equals(key, "Accept-Encoding", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x4u;
                        AcceptEncoding = value;
                        return true;
                    }
                    if (string.Equals(key, "Accept-Language", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x8u;
                        AcceptLanguage = value;
                        return true;
                    }
                   break;
                case 16:
                    if (string.Equals(key, "Content-Encoding", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x100u;
                        ContentEncoding = value;
                        return true;
                    }
                    if (string.Equals(key, "Content-Language", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x200u;
                        ContentLanguage = value;
                        return true;
                    }
                    if (string.Equals(key, "Content-Location", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x800u;
                        ContentLocation = value;
                        return true;
                    }
                   break;
                case 17:
                    if (string.Equals(key, "If-Modified-Since", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x400000u;
                        IfModifiedSince = value;
                        return true;
                    }
                    if (string.Equals(key, "Transfer-Encoding", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag1 |= 0x8u;
                        TransferEncoding = value;
                        return true;
                    }
                   break;
                case 19:
                    if (string.Equals(key, "If-Unmodified-Since", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x2000000u;
                        IfUnmodifiedSince = value;
                        return true;
                    }
                    if (string.Equals(key, "Proxy-Authorization", StringComparison.OrdinalIgnoreCase))
                    {
                        _flag0 |= 0x40000000u;
                        ProxyAuthorization = value;
                        return true;
                    }
                   break;
            }
            return false;
        }

        private bool PropertiesTryRemove(string key)
        {
            switch (key.Length)
            {
                case 2:
                    if (_Te != null && string.Equals(key, "Te", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag1 & 0x2u) != 0);
                        Te = null;
                        return wasSet;
                    }
                    break;
                case 3:
                    if (_Via != null && string.Equals(key, "Via", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag1 & 0x80u) != 0);
                        Via = null;
                        return wasSet;
                    }
                    break;
                case 4:
                    if (_Date != null && string.Equals(key, "Date", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x10000u) != 0);
                        Date = null;
                        return wasSet;
                    }
                    if (_From != null && string.Equals(key, "From", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x80000u) != 0);
                        From = null;
                        return wasSet;
                    }
                    if (_Host != null && string.Equals(key, "Host", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x100000u) != 0);
                        Host = null;
                        return wasSet;
                    }
                    break;
                case 5:
                    if (_Allow != null && string.Equals(key, "Allow", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x10u) != 0);
                        Allow = null;
                        return wasSet;
                    }
                    if (_Range != null && string.Equals(key, "Range", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x80000000u) != 0);
                        Range = null;
                        return wasSet;
                    }
                    break;
                case 6:
                    if (_Accept != null && string.Equals(key, "Accept", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x1u) != 0);
                        Accept = null;
                        return wasSet;
                    }
                    if (_Cookie != null && string.Equals(key, "Cookie", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x8000u) != 0);
                        Cookie = null;
                        return wasSet;
                    }
                    if (_Expect != null && string.Equals(key, "Expect", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x20000u) != 0);
                        Expect = null;
                        return wasSet;
                    }
                    if (_Pragma != null && string.Equals(key, "Pragma", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x20000000u) != 0);
                        Pragma = null;
                        return wasSet;
                    }
                    break;
                case 7:
                    if (_Expires != null && string.Equals(key, "Expires", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x40000u) != 0);
                        Expires = null;
                        return wasSet;
                    }
                    if (_Referer != null && string.Equals(key, "Referer", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag1 & 0x1u) != 0);
                        Referer = null;
                        return wasSet;
                    }
                    if (_Trailer != null && string.Equals(key, "Trailer", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag1 & 0x4u) != 0);
                        Trailer = null;
                        return wasSet;
                    }
                    if (_Upgrade != null && string.Equals(key, "Upgrade", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag1 & 0x20u) != 0);
                        Upgrade = null;
                        return wasSet;
                    }
                    if (_Warning != null && string.Equals(key, "Warning", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag1 & 0x100u) != 0);
                        Warning = null;
                        return wasSet;
                    }
                    break;
                case 8:
                    if (_IfMatch != null && string.Equals(key, "If-Match", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x200000u) != 0);
                        IfMatch = null;
                        return wasSet;
                    }
                    if (_IfRange != null && string.Equals(key, "If-Range", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x1000000u) != 0);
                        IfRange = null;
                        return wasSet;
                    }
                    break;
                case 9:
                    if (_Translate != null && string.Equals(key, "Translate", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag1 & 0x10u) != 0);
                        Translate = null;
                        return wasSet;
                    }
                    break;
                case 10:
                    if (_Connection != null && string.Equals(key, "Connection", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x80u) != 0);
                        Connection = null;
                        return wasSet;
                    }
                    if (_KeepAlive != null && string.Equals(key, "Keep-Alive", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x4000000u) != 0);
                        KeepAlive = null;
                        return wasSet;
                    }
                    if (_UserAgent != null && string.Equals(key, "User-Agent", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag1 & 0x40u) != 0);
                        UserAgent = null;
                        return wasSet;
                    }
                    break;
                case 11:
                    if (_ContentMd5 != null && string.Equals(key, "Content-Md5", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x1000u) != 0);
                        ContentMd5 = null;
                        return wasSet;
                    }
                    break;
                case 12:
                    if (_ContentType != null && string.Equals(key, "Content-Type", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x4000u) != 0);
                        ContentType = null;
                        return wasSet;
                    }
                    if (_MaxForwards != null && string.Equals(key, "Max-Forwards", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x10000000u) != 0);
                        MaxForwards = null;
                        return wasSet;
                    }
                    break;
                case 13:
                    if (_Authorization != null && string.Equals(key, "Authorization", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x20u) != 0);
                        Authorization = null;
                        return wasSet;
                    }
                    if (_CacheControl != null && string.Equals(key, "Cache-Control", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x40u) != 0);
                        CacheControl = null;
                        return wasSet;
                    }
                    if (_ContentRange != null && string.Equals(key, "Content-Range", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x2000u) != 0);
                        ContentRange = null;
                        return wasSet;
                    }
                    if (_IfNoneMatch != null && string.Equals(key, "If-None-Match", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x800000u) != 0);
                        IfNoneMatch = null;
                        return wasSet;
                    }
                    if (_LastModified != null && string.Equals(key, "Last-Modified", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x8000000u) != 0);
                        LastModified = null;
                        return wasSet;
                    }
                    break;
                case 14:
                    if (_AcceptCharset != null && string.Equals(key, "Accept-Charset", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x2u) != 0);
                        AcceptCharset = null;
                        return wasSet;
                    }
                    if (_ContentLength != null && string.Equals(key, "Content-Length", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x400u) != 0);
                        ContentLength = null;
                        return wasSet;
                    }
                    break;
                case 15:
                    if (_AcceptEncoding != null && string.Equals(key, "Accept-Encoding", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x4u) != 0);
                        AcceptEncoding = null;
                        return wasSet;
                    }
                    if (_AcceptLanguage != null && string.Equals(key, "Accept-Language", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x8u) != 0);
                        AcceptLanguage = null;
                        return wasSet;
                    }
                    break;
                case 16:
                    if (_ContentEncoding != null && string.Equals(key, "Content-Encoding", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x100u) != 0);
                        ContentEncoding = null;
                        return wasSet;
                    }
                    if (_ContentLanguage != null && string.Equals(key, "Content-Language", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x200u) != 0);
                        ContentLanguage = null;
                        return wasSet;
                    }
                    if (_ContentLocation != null && string.Equals(key, "Content-Location", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x800u) != 0);
                        ContentLocation = null;
                        return wasSet;
                    }
                    break;
                case 17:
                    if (_IfModifiedSince != null && string.Equals(key, "If-Modified-Since", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x400000u) != 0);
                        IfModifiedSince = null;
                        return wasSet;
                    }
                    if (_TransferEncoding != null && string.Equals(key, "Transfer-Encoding", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag1 & 0x8u) != 0);
                        TransferEncoding = null;
                        return wasSet;
                    }
                    break;
                case 19:
                    if (_IfUnmodifiedSince != null && string.Equals(key, "If-Unmodified-Since", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x2000000u) != 0);
                        IfUnmodifiedSince = null;
                        return wasSet;
                    }
                    if (_ProxyAuthorization != null && string.Equals(key, "Proxy-Authorization", StringComparison.Ordinal))
                    {
                        bool wasSet = ((_flag0 & 0x40000000u) != 0);
                        ProxyAuthorization = null;
                        return wasSet;
                    }
                    break;
            }
            return false;
        }

        private IEnumerable<string> PropertiesKeys()
        {
            if (Accept != null)
            {
                yield return "Accept";
            }
            if (AcceptCharset != null)
            {
                yield return "Accept-Charset";
            }
            if (AcceptEncoding != null)
            {
                yield return "Accept-Encoding";
            }
            if (AcceptLanguage != null)
            {
                yield return "Accept-Language";
            }
            if (Allow != null)
            {
                yield return "Allow";
            }
            if (Authorization != null)
            {
                yield return "Authorization";
            }
            if (CacheControl != null)
            {
                yield return "Cache-Control";
            }
            if (Connection != null)
            {
                yield return "Connection";
            }
            if (ContentEncoding != null)
            {
                yield return "Content-Encoding";
            }
            if (ContentLanguage != null)
            {
                yield return "Content-Language";
            }
            if (ContentLength != null)
            {
                yield return "Content-Length";
            }
            if (ContentLocation != null)
            {
                yield return "Content-Location";
            }
            if (ContentMd5 != null)
            {
                yield return "Content-Md5";
            }
            if (ContentRange != null)
            {
                yield return "Content-Range";
            }
            if (ContentType != null)
            {
                yield return "Content-Type";
            }
            if (Cookie != null)
            {
                yield return "Cookie";
            }
            if (Date != null)
            {
                yield return "Date";
            }
            if (Expect != null)
            {
                yield return "Expect";
            }
            if (Expires != null)
            {
                yield return "Expires";
            }
            if (From != null)
            {
                yield return "From";
            }
            if (Host != null)
            {
                yield return "Host";
            }
            if (IfMatch != null)
            {
                yield return "If-Match";
            }
            if (IfModifiedSince != null)
            {
                yield return "If-Modified-Since";
            }
            if (IfNoneMatch != null)
            {
                yield return "If-None-Match";
            }
            if (IfRange != null)
            {
                yield return "If-Range";
            }
            if (IfUnmodifiedSince != null)
            {
                yield return "If-Unmodified-Since";
            }
            if (KeepAlive != null)
            {
                yield return "Keep-Alive";
            }
            if (LastModified != null)
            {
                yield return "Last-Modified";
            }
            if (MaxForwards != null)
            {
                yield return "Max-Forwards";
            }
            if (Pragma != null)
            {
                yield return "Pragma";
            }
            if (ProxyAuthorization != null)
            {
                yield return "Proxy-Authorization";
            }
            if (Range != null)
            {
                yield return "Range";
            }
            if (Referer != null)
            {
                yield return "Referer";
            }
            if (Te != null)
            {
                yield return "Te";
            }
            if (Trailer != null)
            {
                yield return "Trailer";
            }
            if (TransferEncoding != null)
            {
                yield return "Transfer-Encoding";
            }
            if (Translate != null)
            {
                yield return "Translate";
            }
            if (Upgrade != null)
            {
                yield return "Upgrade";
            }
            if (UserAgent != null)
            {
                yield return "User-Agent";
            }
            if (Via != null)
            {
                yield return "Via";
            }
            if (Warning != null)
            {
                yield return "Warning";
            }
        }

        private IEnumerable<string[]> PropertiesValues()
        {
            if (Accept != null)
            {
                yield return Accept;
            }
            if (AcceptCharset != null)
            {
                yield return AcceptCharset;
            }
            if (AcceptEncoding != null)
            {
                yield return AcceptEncoding;
            }
            if (AcceptLanguage != null)
            {
                yield return AcceptLanguage;
            }
            if (Allow != null)
            {
                yield return Allow;
            }
            if (Authorization != null)
            {
                yield return Authorization;
            }
            if (CacheControl != null)
            {
                yield return CacheControl;
            }
            if (Connection != null)
            {
                yield return Connection;
            }
            if (ContentEncoding != null)
            {
                yield return ContentEncoding;
            }
            if (ContentLanguage != null)
            {
                yield return ContentLanguage;
            }
            if (ContentLength != null)
            {
                yield return ContentLength;
            }
            if (ContentLocation != null)
            {
                yield return ContentLocation;
            }
            if (ContentMd5 != null)
            {
                yield return ContentMd5;
            }
            if (ContentRange != null)
            {
                yield return ContentRange;
            }
            if (ContentType != null)
            {
                yield return ContentType;
            }
            if (Cookie != null)
            {
                yield return Cookie;
            }
            if (Date != null)
            {
                yield return Date;
            }
            if (Expect != null)
            {
                yield return Expect;
            }
            if (Expires != null)
            {
                yield return Expires;
            }
            if (From != null)
            {
                yield return From;
            }
            if (Host != null)
            {
                yield return Host;
            }
            if (IfMatch != null)
            {
                yield return IfMatch;
            }
            if (IfModifiedSince != null)
            {
                yield return IfModifiedSince;
            }
            if (IfNoneMatch != null)
            {
                yield return IfNoneMatch;
            }
            if (IfRange != null)
            {
                yield return IfRange;
            }
            if (IfUnmodifiedSince != null)
            {
                yield return IfUnmodifiedSince;
            }
            if (KeepAlive != null)
            {
                yield return KeepAlive;
            }
            if (LastModified != null)
            {
                yield return LastModified;
            }
            if (MaxForwards != null)
            {
                yield return MaxForwards;
            }
            if (Pragma != null)
            {
                yield return Pragma;
            }
            if (ProxyAuthorization != null)
            {
                yield return ProxyAuthorization;
            }
            if (Range != null)
            {
                yield return Range;
            }
            if (Referer != null)
            {
                yield return Referer;
            }
            if (Te != null)
            {
                yield return Te;
            }
            if (Trailer != null)
            {
                yield return Trailer;
            }
            if (TransferEncoding != null)
            {
                yield return TransferEncoding;
            }
            if (Translate != null)
            {
                yield return Translate;
            }
            if (Upgrade != null)
            {
                yield return Upgrade;
            }
            if (UserAgent != null)
            {
                yield return UserAgent;
            }
            if (Via != null)
            {
                yield return Via;
            }
            if (Warning != null)
            {
                yield return Warning;
            }
        }

        private IEnumerable<KeyValuePair<string, string[]>> PropertiesEnumerable()
        {
            if (Accept != null)
            {
                yield return new KeyValuePair<string, string[]>("Accept", Accept);
            }
            if (AcceptCharset != null)
            {
                yield return new KeyValuePair<string, string[]>("Accept-Charset", AcceptCharset);
            }
            if (AcceptEncoding != null)
            {
                yield return new KeyValuePair<string, string[]>("Accept-Encoding", AcceptEncoding);
            }
            if (AcceptLanguage != null)
            {
                yield return new KeyValuePair<string, string[]>("Accept-Language", AcceptLanguage);
            }
            if (Allow != null)
            {
                yield return new KeyValuePair<string, string[]>("Allow", Allow);
            }
            if (Authorization != null)
            {
                yield return new KeyValuePair<string, string[]>("Authorization", Authorization);
            }
            if (CacheControl != null)
            {
                yield return new KeyValuePair<string, string[]>("Cache-Control", CacheControl);
            }
            if (Connection != null)
            {
                yield return new KeyValuePair<string, string[]>("Connection", Connection);
            }
            if (ContentEncoding != null)
            {
                yield return new KeyValuePair<string, string[]>("Content-Encoding", ContentEncoding);
            }
            if (ContentLanguage != null)
            {
                yield return new KeyValuePair<string, string[]>("Content-Language", ContentLanguage);
            }
            if (ContentLength != null)
            {
                yield return new KeyValuePair<string, string[]>("Content-Length", ContentLength);
            }
            if (ContentLocation != null)
            {
                yield return new KeyValuePair<string, string[]>("Content-Location", ContentLocation);
            }
            if (ContentMd5 != null)
            {
                yield return new KeyValuePair<string, string[]>("Content-Md5", ContentMd5);
            }
            if (ContentRange != null)
            {
                yield return new KeyValuePair<string, string[]>("Content-Range", ContentRange);
            }
            if (ContentType != null)
            {
                yield return new KeyValuePair<string, string[]>("Content-Type", ContentType);
            }
            if (Cookie != null)
            {
                yield return new KeyValuePair<string, string[]>("Cookie", Cookie);
            }
            if (Date != null)
            {
                yield return new KeyValuePair<string, string[]>("Date", Date);
            }
            if (Expect != null)
            {
                yield return new KeyValuePair<string, string[]>("Expect", Expect);
            }
            if (Expires != null)
            {
                yield return new KeyValuePair<string, string[]>("Expires", Expires);
            }
            if (From != null)
            {
                yield return new KeyValuePair<string, string[]>("From", From);
            }
            if (Host != null)
            {
                yield return new KeyValuePair<string, string[]>("Host", Host);
            }
            if (IfMatch != null)
            {
                yield return new KeyValuePair<string, string[]>("If-Match", IfMatch);
            }
            if (IfModifiedSince != null)
            {
                yield return new KeyValuePair<string, string[]>("If-Modified-Since", IfModifiedSince);
            }
            if (IfNoneMatch != null)
            {
                yield return new KeyValuePair<string, string[]>("If-None-Match", IfNoneMatch);
            }
            if (IfRange != null)
            {
                yield return new KeyValuePair<string, string[]>("If-Range", IfRange);
            }
            if (IfUnmodifiedSince != null)
            {
                yield return new KeyValuePair<string, string[]>("If-Unmodified-Since", IfUnmodifiedSince);
            }
            if (KeepAlive != null)
            {
                yield return new KeyValuePair<string, string[]>("Keep-Alive", KeepAlive);
            }
            if (LastModified != null)
            {
                yield return new KeyValuePair<string, string[]>("Last-Modified", LastModified);
            }
            if (MaxForwards != null)
            {
                yield return new KeyValuePair<string, string[]>("Max-Forwards", MaxForwards);
            }
            if (Pragma != null)
            {
                yield return new KeyValuePair<string, string[]>("Pragma", Pragma);
            }
            if (ProxyAuthorization != null)
            {
                yield return new KeyValuePair<string, string[]>("Proxy-Authorization", ProxyAuthorization);
            }
            if (Range != null)
            {
                yield return new KeyValuePair<string, string[]>("Range", Range);
            }
            if (Referer != null)
            {
                yield return new KeyValuePair<string, string[]>("Referer", Referer);
            }
            if (Te != null)
            {
                yield return new KeyValuePair<string, string[]>("Te", Te);
            }
            if (Trailer != null)
            {
                yield return new KeyValuePair<string, string[]>("Trailer", Trailer);
            }
            if (TransferEncoding != null)
            {
                yield return new KeyValuePair<string, string[]>("Transfer-Encoding", TransferEncoding);
            }
            if (Translate != null)
            {
                yield return new KeyValuePair<string, string[]>("Translate", Translate);
            }
            if (Upgrade != null)
            {
                yield return new KeyValuePair<string, string[]>("Upgrade", Upgrade);
            }
            if (UserAgent != null)
            {
                yield return new KeyValuePair<string, string[]>("User-Agent", UserAgent);
            }
            if (Via != null)
            {
                yield return new KeyValuePair<string, string[]>("Via", Via);
            }
            if (Warning != null)
            {
                yield return new KeyValuePair<string, string[]>("Warning", Warning);
            }
        }
    }
}
